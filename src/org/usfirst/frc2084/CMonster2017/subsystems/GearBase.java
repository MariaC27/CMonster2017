// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2084.CMonster2017.subsystems;

import java.awt.Robot;

import org.usfirst.frc2084.CMonster2017.RobotMap;
import org.usfirst.frc2084.CMonster2017.commands.*;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class GearBase extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Compressor compressor = RobotMap.gearBaseCompressor;
    private final DoubleSolenoid gearSolenoid = RobotMap.gearBasegearSolenoid;
    private final DoubleSolenoid floorGearSolenoid = RobotMap.gearBasefloorGearSolenoid;
    private final DoubleSolenoid rotatGearSolenoid = RobotMap.gearBaserotatGearSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	//delcare the compressor above
    
    public static boolean floorGearUp = false;
    public static CANTalon GearIntakeTalon = RobotMap.GearIntakeTalon;
    public static Spark spark = (Spark) RobotMap.spark;
	
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	// these methods are called into the button commands

	public void OpenGear() {

		// declare a new instance of a solenoid, make the off, reverse, and forward
		// commands

		gearSolenoid.set(DoubleSolenoid.Value.kForward);

	}

	public void CloseGear() {

		gearSolenoid.set(DoubleSolenoid.Value.kReverse);

	}

	public void CompressorOn() {
		compressor.setClosedLoopControl(true);
		//in this subsystem, we declare the compressor and start is once pressure is below 120 psi
	}
	
	
	//stuff the get the gear from the floor
	
	//commands for the rotary actuator
	public void rotateGearUp(){
		rotatGearSolenoid.set(DoubleSolenoid.Value.kForward);
		//moves the rotary actuator that rotates the gear intake up and down
	}
	
	public void rotateGearDown(){
		rotatGearSolenoid.set(DoubleSolenoid.Value.kReverse);
		//moves the rotary actuator that rotates the gear intake up and down
	}
	
	public void gearIntakeGo(){
		GearIntakeTalon.set(1); //not currently used
		//moves the motor that intakes the gear from the floor
		spark.set(-0.75); //intake at 3/4 speed so the motor doesn't stall
	}
	
	public void gearIntakeStop(){
		GearIntakeTalon.set(0);
		//stops intaking the gear from the floor
		spark.set(0);
	}
	
	public void FloorGearOut(){
		GearIntakeTalon.set(-0.5);
		//motor pushes gear out at half speed when delivering gear onto the peg
		spark.set(0.5);
	}
	
	public void FloorGearOutStop(){
		GearIntakeTalon.set(0);
		//stop motor when button is released 
		spark.set(0);
		
	}
		
	
	
	
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
		
		if (floorGearUp == true){
			rotatGearSolenoid.set(DoubleSolenoid.Value.kReverse);
		}
		
		else if (floorGearUp == false){
			rotatGearSolenoid.set(DoubleSolenoid.Value.kForward);
		}

			
	}
}
