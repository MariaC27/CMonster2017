// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2084.CMonster2017.commands;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.CommandGroup;
<<<<<<< HEAD:src/org/usfirst/frc2084/CMonster2017/commands/AutonomousRightSide.java
import edu.wpi.first.wpilibj.command.Scheduler;
=======
>>>>>>> 6011140ae92ef4423b2a20ed31e77178eb71dd90:src/org/usfirst/frc2084/CMonster2017/commands/AutonomousRightSide.java

import org.usfirst.frc2084.CMonster2017.RobotMap;
import org.usfirst.frc2084.CMonster2017.PID.DistancePID;
import org.usfirst.frc2084.CMonster2017.PID.HeadingPID;
import org.usfirst.frc2084.CMonster2017.subsystems.*;

/**
 *
 */
public class AutonomousRightSide extends CommandGroup {
	
	private final DistancePID distancePID = RobotMap.distancePID;
	private final HeadingPID headingPID = RobotMap.headingPID;
<<<<<<< HEAD:src/org/usfirst/frc2084/CMonster2017/commands/AutonomousRightSide.java
=======
	private final Encoder leftEncoder = RobotMap.driveBaseLeftEncoder;
	private final Encoder rightEncoder = RobotMap.driveBaseRightEncoder;
>>>>>>> 6011140ae92ef4423b2a20ed31e77178eb71dd90:src/org/usfirst/frc2084/CMonster2017/commands/AutonomousRightSide.java


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousRightSide() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    	
    	
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
        addSequential(new MoveForward());
        addSequential(new TurnLeft());
        addSequential(new DropPoint());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 
    } 
}
