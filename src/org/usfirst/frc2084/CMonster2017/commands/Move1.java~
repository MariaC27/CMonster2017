// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2084.CMonster2017.commands;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2084.CMonster2017.Robot;
import org.usfirst.frc2084.CMonster2017.RobotMap;
import org.usfirst.frc2084.CMonster2017.PID.DistancePID;
import org.usfirst.frc2084.CMonster2017.PID.HeadingPID;
import com.kauailabs.navx.frc.AHRS;

/**
 *
 */
public class Move1 extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	private final SpeedController leftTalon1 = RobotMap.driveBaseLeftTalon1;
    private final Encoder leftEncoder = RobotMap.driveBaseLeftEncoder;
    private final PIDController leftPIDController = RobotMap.driveBaseLeftPIDController;
    private final SpeedController rightTanlon1 = RobotMap.driveBaseRightTanlon1;
    private final Encoder rightEncoder = RobotMap.driveBaseRightEncoder;
    private final PIDController rightPIDController = RobotMap.driveBaseRightPIDController;
    private final AHRS ahrs = RobotMap.ahrs;  
      
      // There are 2 driver motors on each side of the robot. 
      // Here are the declarations.
      
     private final SpeedController leftTalon2 = RobotMap.driveBasePIDLeftTalon2;
     private final PIDController leftPIDController2 = RobotMap.driveBasePIDLeftPIDController2;
     private final SpeedController rightTanlon2 = RobotMap.driveBasePIDRightTanlon2;
     private final PIDController rightPIDController2 = RobotMap.driveBasePIDRightPIDController2;
	    
	 static double AverageDistance;  // shared with the DistancePID Class
	 double LeftDistance;    
	 double RightDistance;
	    
	 HeadingPID headingPID = new HeadingPID();  //instance variables 
	 DistancePID distancePID = new DistancePID();
	    
	    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Move1() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveBase);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    	distancePID.Reset();
    	headingPID.Reset();
    	distancePID.enable();
    	headingPID.enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
